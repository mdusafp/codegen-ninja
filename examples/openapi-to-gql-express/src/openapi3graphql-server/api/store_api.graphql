#
# Swagger Petstore - OpenAPI 3.0
#
#
# This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach! You can now help us improve the API whether it's by making changes to the definition itself or to the code. That way, with time, we can improve the API in general, and expose some of the new features in OAS3.  _If you're looking for the Swagger 2.0/OAS 2.0 version of Petstore, then click [here](https://editor.swagger.io/?url=https://petstore.swagger.io/v2/swagger.yaml). Alternatively, you can load via the `Edit > Load Petstore OAS 2.0` menu option!_  Some useful links: - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore) - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
#
# Version: 1.0.11
# Contact: apiteam@swagger.io
# Generated by OpenAPI Generator: https://openapi-generator.tech

# package openapi3graphql-server

# store_api

input DeleteOrderInput {
  # ID of the order that needs to be deleted
  orderId: Int!
}

input PlaceOrderInput {
  order: OrderInput
}

type Mutation {
  # Delete purchase order by ID
  # For valid response try integer IDs with value &lt; 1000. Anything above 1000 or nonintegers will generate API errors
  # @param Int! orderId ID of the order that needs to be deleted
  # @return [Boolean]
  DeleteOrder(input: DeleteOrderInput!): Boolean
  # Place an order for a pet
  # Place a new order in the store
  # @param Order order
  # @return [Order]
  PlaceOrder(input: PlaceOrderInput!): Order
}

type Query {
  # Returns pet inventories by status
  # Returns a map of status codes to quantities
  # @return [Int!]
  GetInventory: Int!
  # Find purchase order by ID
  # For valid response try integer IDs with value &lt;&#x3D; 5 or &gt; 10. Other values will generate exceptions.
  # @param Int! orderId ID of order that needs to be fetched
  # @return [Order]
  GetOrderById(orderId: Int!): Order
}
