#
# Swagger Petstore - OpenAPI 3.0
#
#
# This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach! You can now help us improve the API whether it's by making changes to the definition itself or to the code. That way, with time, we can improve the API in general, and expose some of the new features in OAS3.  _If you're looking for the Swagger 2.0/OAS 2.0 version of Petstore, then click [here](https://editor.swagger.io/?url=https://petstore.swagger.io/v2/swagger.yaml). Alternatively, you can load via the `Edit > Load Petstore OAS 2.0` menu option!_  Some useful links: - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore) - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
#
# Version: 1.0.11
# Contact: apiteam@swagger.io
# Generated by OpenAPI Generator: https://openapi-generator.tech

# package openapi3graphql-server

# pet_api

input AddPetInput {
  # Create a new pet in the store
  pet: PetInput
}

input DeletePetInput {
  # Pet id to delete
  petId: Int!
  #
  apiKey: String!
}

input UpdatePetInput {
  # Update an existent pet in the store
  pet: PetInput
}

input UpdatePetWithFormInput {
  # ID of pet that needs to be updated
  petId: Int!
  # Name of pet that needs to be updated
  name: String!
  # Status of pet that needs to be updated
  status: String!
}

input UploadFileInput {
  # ID of pet to update
  petId: Int!
  # Additional Metadata
  additionalMetadata: String!

  body: String!
}

type Mutation {
  # Add a new pet to the store
  # Add a new pet to the store
  # @param Pet pet Create a new pet in the store
  # @return [Pet]
  AddPet(input: AddPetInput!): Pet
  # Deletes a pet
  # delete a pet
  # @param Int! petId Pet id to delete
  # @param String! apiKey
  # @return [Boolean]
  DeletePet(input: DeletePetInput!): Boolean
  # Update an existing pet
  # Update an existing pet by Id
  # @param Pet pet Update an existent pet in the store
  # @return [Pet]
  UpdatePet(input: UpdatePetInput!): Pet
  # Updates a pet in the store with form data
  #
  # @param Int! petId ID of pet that needs to be updated
  # @param String! name Name of pet that needs to be updated
  # @param String! status Status of pet that needs to be updated
  # @return [Boolean]
  UpdatePetWithForm(input: UpdatePetWithFormInput!): Boolean
  # uploads an image
  #
  # @param Int! petId ID of pet to update
  # @param String! additionalMetadata Additional Metadata
  # @param String! body
  # @return [ApiResponse]
  UploadFile(input: UploadFileInput!): ApiResponse
}

type Query {
  # Finds Pets by status
  # Multiple status values can be provided with comma separated strings
  # @param String! status Status values that need to be considered for filter
  # @return [Pet]
  FindPetsByStatus(status: String!): Pet
  # Finds Pets by tags
  # Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
  # @param String! tags Tags to filter by
  # @return [Pet]
  FindPetsByTags(tags: String!): Pet
  # Find pet by ID
  # Returns a single pet
  # @param Int! petId ID of pet to return
  # @return [Pet]
  GetPetById(petId: Int!): Pet
}
