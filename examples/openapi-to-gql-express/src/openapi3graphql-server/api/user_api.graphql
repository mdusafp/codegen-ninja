#
# Swagger Petstore - OpenAPI 3.0
#
#
# This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach! You can now help us improve the API whether it's by making changes to the definition itself or to the code. That way, with time, we can improve the API in general, and expose some of the new features in OAS3.  _If you're looking for the Swagger 2.0/OAS 2.0 version of Petstore, then click [here](https://editor.swagger.io/?url=https://petstore.swagger.io/v2/swagger.yaml). Alternatively, you can load via the `Edit > Load Petstore OAS 2.0` menu option!_  Some useful links: - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore) - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
#
# Version: 1.0.11
# Contact: apiteam@swagger.io
# Generated by OpenAPI Generator: https://openapi-generator.tech

# package openapi3graphql-server

# user_api

input CreateUserInput {
  # Created user object
  user: UserInput
}

input CreateUsersWithListInputInput {
  user: [UserInput]
}

input DeleteUserInput {
  # The name that needs to be deleted
  username: String!
}

input UpdateUserInput {
  # name that need to be deleted
  username: String!
  # Update an existent user in the store
  user: UserInput
}

type Mutation {
  # Create user
  # This can only be done by the logged in user.
  # @param User user Created user object
  # @return [User]
  CreateUser(input: CreateUserInput!): User
  # Creates list of users with given input array
  # Creates list of users with given input array
  # @param User user
  # @return [User]
  CreateUsersWithListInput(input: CreateUsersWithListInputInput!): User
  # Delete user
  # This can only be done by the logged in user.
  # @param String! username The name that needs to be deleted
  # @return [Boolean]
  DeleteUser(input: DeleteUserInput!): Boolean
  # Update user
  # This can only be done by the logged in user.
  # @param String! username name that need to be deleted
  # @param User user Update an existent user in the store
  # @return [Boolean]
  UpdateUser(input: UpdateUserInput!): Boolean
}

type Query {
  # Get user by user name
  #
  # @param String! username The name that needs to be fetched. Use user1 for testing.
  # @return [User]
  GetUserByName(username: String!): User
  # Logs user into the system
  #
  # @param String! username The user name for login
  # @param String! password The password for login in clear text
  # @return [String!]
  LoginUser(username: String!, password: String!): String!
  # Logs out current logged in user session
  #
  # @return [Boolean]
  LogoutUser: Boolean
}
