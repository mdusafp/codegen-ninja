openapi: 3.0.3
info:
  contact:
    email: apiteam@swagger.io
  description: |-
    This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about
    Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!
    You can now help us improve the API whether it's by making changes to the definition itself or to the code.
    That way, with time, we can improve the API in general, and expose some of the new features in OAS3.

    _If you're looking for the Swagger 2.0/OAS 2.0 version of Petstore, then click [here](https://editor.swagger.io/?url=https://petstore.swagger.io/v2/swagger.yaml). Alternatively, you can load via the `Edit > Load Petstore OAS 2.0` menu option!_

    Some useful links:
    - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)
    - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Swagger Petstore - OpenAPI 3.0
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: https://petstore3.swagger.io/api/v3
tags:
  - description: Everything about your Pets
    externalDocs:
      description: Find out more
      url: http://swagger.io
    name: pet
  - description: Access to Petstore orders
    externalDocs:
      description: Find out more about our store
      url: http://swagger.io
    name: store
  - description: Operations about user
    name: user
paths:
  /pet:
    post:
      description: Add a new pet to the store
      operationId: addPet
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
          application/xml:
            schema:
              $ref: '#/components/schemas/Pet'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Pet'
        description: Create a new pet in the store
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
            application/xml:
              schema:
                $ref: '#/components/schemas/Pet'
          description: Successful operation
        '405':
          description: Invalid input
      security:
        - petstore_auth:
            - write:pets
            - read:pets
      summary: Add a new pet to the store
      tags:
        - pet
      x-eov-operation-handler: controllers/PetController
    put:
      description: Update an existing pet by Id
      operationId: updatePet
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
          application/xml:
            schema:
              $ref: '#/components/schemas/Pet'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Pet'
        description: Update an existent pet in the store
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
            application/xml:
              schema:
                $ref: '#/components/schemas/Pet'
          description: Successful operation
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
        '405':
          description: Validation exception
      security:
        - petstore_auth:
            - write:pets
            - read:pets
      summary: Update an existing pet
      tags:
        - pet
      x-eov-operation-handler: controllers/PetController
  /pet/findByStatus:
    get:
      description: Multiple status values can be provided with comma separated strings
      operationId: findPetsByStatus
      parameters:
        - description: Status values that need to be considered for filter
          explode: true
          in: query
          name: status
          required: false
          schema:
            default: available
            enum:
              - available
              - pending
              - sold
            type: string
          style: form
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Pet'
                type: array
            application/xml:
              schema:
                items:
                  $ref: '#/components/schemas/Pet'
                type: array
          description: successful operation
        '400':
          description: Invalid status value
      security:
        - petstore_auth:
            - write:pets
            - read:pets
      summary: Finds Pets by status
      tags:
        - pet
      x-eov-operation-handler: controllers/PetController
  /pet/findByTags:
    get:
      description:
        "Multiple tags can be provided with comma separated strings. Use\
        \ tag1, tag2, tag3 for testing."
      operationId: findPetsByTags
      parameters:
        - description: Tags to filter by
          explode: true
          in: query
          name: tags
          required: false
          schema:
            items:
              type: string
            type: array
          style: form
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Pet'
                type: array
            application/xml:
              schema:
                items:
                  $ref: '#/components/schemas/Pet'
                type: array
          description: successful operation
        '400':
          description: Invalid tag value
      security:
        - petstore_auth:
            - write:pets
            - read:pets
      summary: Finds Pets by tags
      tags:
        - pet
      x-eov-operation-handler: controllers/PetController
  /pet/{petId}:
    delete:
      description: delete a pet
      operationId: deletePet
      parameters:
        - description: ''
          explode: false
          in: header
          name: api_key
          required: false
          schema:
            type: string
          style: simple
        - description: Pet id to delete
          explode: false
          in: path
          name: petId
          required: true
          schema:
            format: int64
            type: integer
          style: simple
      responses:
        '400':
          description: Invalid pet value
      security:
        - petstore_auth:
            - write:pets
            - read:pets
      summary: Deletes a pet
      tags:
        - pet
      x-eov-operation-handler: controllers/PetController
    get:
      description: Returns a single pet
      operationId: getPetById
      parameters:
        - description: ID of pet to return
          explode: false
          in: path
          name: petId
          required: true
          schema:
            format: int64
            type: integer
          style: simple
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
            application/xml:
              schema:
                $ref: '#/components/schemas/Pet'
          description: successful operation
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
      security:
        - api_key: []
        - petstore_auth:
            - write:pets
            - read:pets
      summary: Find pet by ID
      tags:
        - pet
      x-eov-operation-handler: controllers/PetController
    post:
      description: ''
      operationId: updatePetWithForm
      parameters:
        - description: ID of pet that needs to be updated
          explode: false
          in: path
          name: petId
          required: true
          schema:
            format: int64
            type: integer
          style: simple
        - description: Name of pet that needs to be updated
          explode: true
          in: query
          name: name
          required: false
          schema:
            type: string
          style: form
        - description: Status of pet that needs to be updated
          explode: true
          in: query
          name: status
          required: false
          schema:
            type: string
          style: form
      responses:
        '405':
          description: Invalid input
      security:
        - petstore_auth:
            - write:pets
            - read:pets
      summary: Updates a pet in the store with form data
      tags:
        - pet
      x-eov-operation-handler: controllers/PetController
  /pet/{petId}/uploadImage:
    post:
      description: ''
      operationId: uploadFile
      parameters:
        - description: ID of pet to update
          explode: false
          in: path
          name: petId
          required: true
          schema:
            format: int64
            type: integer
          style: simple
        - description: Additional Metadata
          explode: true
          in: query
          name: additionalMetadata
          required: false
          schema:
            type: string
          style: form
      requestBody:
        content:
          application/octet-stream:
            schema:
              format: binary
              type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: successful operation
      security:
        - petstore_auth:
            - write:pets
            - read:pets
      summary: uploads an image
      tags:
        - pet
      x-eov-operation-handler: controllers/PetController
  /store/inventory:
    get:
      description: Returns a map of status codes to quantities
      operationId: getInventory
      responses:
        '200':
          content:
            application/json:
              schema:
                additionalProperties:
                  format: int32
                  type: integer
                type: object
          description: successful operation
      security:
        - api_key: []
      summary: Returns pet inventories by status
      tags:
        - store
      x-eov-operation-handler: controllers/StoreController
  /store/order:
    post:
      description: Place a new order in the store
      operationId: placeOrder
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
          application/xml:
            schema:
              $ref: '#/components/schemas/Order'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
          description: successful operation
        '405':
          description: Invalid input
      summary: Place an order for a pet
      tags:
        - store
      x-eov-operation-handler: controllers/StoreController
  /store/order/{orderId}:
    delete:
      description:
        For valid response try integer IDs with value < 1000. Anything
        above 1000 or nonintegers will generate API errors
      operationId: deleteOrder
      parameters:
        - description: ID of the order that needs to be deleted
          explode: false
          in: path
          name: orderId
          required: true
          schema:
            format: int64
            type: integer
          style: simple
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
      summary: Delete purchase order by ID
      tags:
        - store
      x-eov-operation-handler: controllers/StoreController
    get:
      description:
        For valid response try integer IDs with value <= 5 or > 10. Other
        values will generate exceptions.
      operationId: getOrderById
      parameters:
        - description: ID of order that needs to be fetched
          explode: false
          in: path
          name: orderId
          required: true
          schema:
            format: int64
            type: integer
          style: simple
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
          description: successful operation
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
      summary: Find purchase order by ID
      tags:
        - store
      x-eov-operation-handler: controllers/StoreController
  /user:
    post:
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
        description: Created user object
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
          description: successful operation
      summary: Create user
      tags:
        - user
      x-eov-operation-handler: controllers/UserController
  /user/createWithList:
    post:
      description: Creates list of users with given input array
      operationId: createUsersWithListInput
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: '#/components/schemas/User'
              type: array
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
          description: Successful operation
        default:
          description: successful operation
      summary: Creates list of users with given input array
      tags:
        - user
      x-eov-operation-handler: controllers/UserController
  /user/login:
    get:
      description: ''
      operationId: loginUser
      parameters:
        - description: The user name for login
          explode: true
          in: query
          name: username
          required: false
          schema:
            type: string
          style: form
        - description: The password for login in clear text
          explode: true
          in: query
          name: password
          required: false
          schema:
            type: string
          style: form
      responses:
        '200':
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              explode: false
              schema:
                format: int32
                type: integer
              style: simple
            X-Expires-After:
              description: date in UTC when token expires
              explode: false
              schema:
                format: date-time
                type: string
              style: simple
        '400':
          description: Invalid username/password supplied
      summary: Logs user into the system
      tags:
        - user
      x-eov-operation-handler: controllers/UserController
  /user/logout:
    get:
      description: ''
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: successful operation
      summary: Logs out current logged in user session
      tags:
        - user
      x-eov-operation-handler: controllers/UserController
  /user/{username}:
    delete:
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - description: The name that needs to be deleted
          explode: false
          in: path
          name: username
          required: true
          schema:
            type: string
          style: simple
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
      summary: Delete user
      tags:
        - user
      x-eov-operation-handler: controllers/UserController
    get:
      description: ''
      operationId: getUserByName
      parameters:
        - description: 'The name that needs to be fetched. Use user1 for testing. '
          explode: false
          in: path
          name: username
          required: true
          schema:
            type: string
          style: simple
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
          description: successful operation
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
      summary: Get user by user name
      tags:
        - user
      x-eov-operation-handler: controllers/UserController
    put:
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - description: name that need to be deleted
          explode: false
          in: path
          name: username
          required: true
          schema:
            type: string
          style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
        description: Update an existent user in the store
      responses:
        default:
          description: successful operation
      summary: Update user
      tags:
        - user
      x-eov-operation-handler: controllers/UserController
components:
  requestBodies:
    Pet:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Pet'
        application/xml:
          schema:
            $ref: '#/components/schemas/Pet'
      description: Pet object that needs to be added to the store
    UserArray:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/User'
            type: array
      description: List of user object
  schemas:
    Order:
      example:
        petId: 198772
        quantity: 7
        id: 10
        shipDate: 2000-01-23T04:56:07.000+00:00
        complete: true
        status: approved
      properties:
        id:
          example: 10
          format: int64
          type: integer
        petId:
          example: 198772
          format: int64
          type: integer
        quantity:
          example: 7
          format: int32
          type: integer
        shipDate:
          format: date-time
          type: string
        status:
          description: Order Status
          enum:
            - placed
            - approved
            - delivered
          example: approved
          type: string
        complete:
          type: boolean
      type: object
      xml:
        name: order
    Customer:
      properties:
        id:
          example: 100000
          format: int64
          type: integer
        username:
          example: fehguy
          type: string
        address:
          items:
            $ref: '#/components/schemas/Address'
          type: array
          xml:
            name: addresses
            wrapped: true
      type: object
      xml:
        name: customer
    Address:
      properties:
        street:
          example: 437 Lytton
          type: string
        city:
          example: Palo Alto
          type: string
        state:
          example: CA
          type: string
        zip:
          example: '94301'
          type: string
      type: object
      xml:
        name: address
    Category:
      example:
        name: Dogs
        id: 1
      properties:
        id:
          example: 1
          format: int64
          type: integer
        name:
          example: Dogs
          type: string
      type: object
      xml:
        name: category
    User:
      example:
        firstName: John
        lastName: James
        password: '12345'
        userStatus: 1
        phone: '12345'
        id: 10
        email: john@email.com
        username: theUser
      properties:
        id:
          example: 10
          format: int64
          type: integer
        username:
          example: theUser
          type: string
        firstName:
          example: John
          type: string
        lastName:
          example: James
          type: string
        email:
          example: john@email.com
          type: string
        password:
          example: '12345'
          type: string
        phone:
          example: '12345'
          type: string
        userStatus:
          description: User Status
          example: 1
          format: int32
          type: integer
      type: object
      xml:
        name: user
    Tag:
      example:
        name: name
        id: 0
      properties:
        id:
          format: int64
          type: integer
        name:
          type: string
      type: object
      xml:
        name: tag
    Pet:
      example:
        photoUrls:
          - photoUrls
          - photoUrls
        name: doggie
        id: 10
        category:
          name: Dogs
          id: 1
        tags:
          - name: name
            id: 0
          - name: name
            id: 0
        status: available
      properties:
        id:
          example: 10
          format: int64
          type: integer
        name:
          example: doggie
          type: string
        category:
          $ref: '#/components/schemas/Category'
        photoUrls:
          items:
            type: string
            xml:
              name: photoUrl
          type: array
          xml:
            wrapped: true
        tags:
          items:
            $ref: '#/components/schemas/Tag'
          type: array
          xml:
            wrapped: true
        status:
          description: pet status in the store
          enum:
            - available
            - pending
            - sold
          type: string
      required:
        - name
        - photoUrls
      type: object
      xml:
        name: pet
    ApiResponse:
      example:
        code: 0
        type: type
        message: message
      properties:
        code:
          format: int32
          type: integer
        type:
          type: string
        message:
          type: string
      type: object
      xml:
        name: '##default'
  securitySchemes:
    petstore_auth:
      flows:
        implicit:
          authorizationUrl: https://petstore3.swagger.io/oauth/authorize
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
      type: oauth2
    api_key:
      in: header
      name: api_key
      type: apiKey
