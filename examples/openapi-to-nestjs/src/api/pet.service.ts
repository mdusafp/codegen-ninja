/**
 * Swagger Petstore - OpenAPI 3.0
 * This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we\'ve switched to the design first approach! You can now help us improve the API whether it\'s by making changes to the definition itself or to the code. That way, with time, we can improve the API in general, and expose some of the new features in OAS3.  _If you\'re looking for the Swagger 2.0/OAS 2.0 version of Petstore, then click [here](https://editor.swagger.io/?url=https://petstore.swagger.io/v2/swagger.yaml). Alternatively, you can load via the `Edit > Load Petstore OAS 2.0` menu option!_  Some useful links: - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore) - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
 *
 * The version of the OpenAPI document: 1.0.11
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@nestjs/common';
import { HttpService } from '@nestjs/axios';
import { AxiosResponse } from 'axios';
import { Observable } from 'rxjs';
import { ApiResponse } from '../model/apiResponse';
import { Pet } from '../model/pet';
import { Configuration } from '../configuration';
import { PetServiceInterface } from './pet.serviceInterface';

@Injectable()
export class PetService implements PetServiceInterface {
  protected basePath = 'https://petstore3.swagger.io/api/v3';
  public defaultHeaders: Record<string, string> = {};
  public configuration = new Configuration();

  constructor(
    protected httpClient: HttpService,
    @Optional() configuration: Configuration
  ) {
    this.configuration = configuration || this.configuration;
    this.basePath = configuration?.basePath || this.basePath;
  }

  /**
   * @param consumes string[] mime-types
   * @return true: consumes contains 'multipart/form-data', false: otherwise
   */
  private canConsumeForm(consumes: string[]): boolean {
    const form = 'multipart/form-data';
    return consumes.includes(form);
  }

  /**
   * Add a new pet to the store
   * Add a new pet to the store
   * @param pet Create a new pet in the store
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public addPet(pet: Pet): Observable<AxiosResponse<Pet>>;
  public addPet(pet: Pet): Observable<any> {
    if (pet === null || pet === undefined) {
      throw new Error(
        'Required parameter pet was null or undefined when calling addPet.'
      );
    }

    let headers = { ...this.defaultHeaders };

    // authentication (petstore_auth) required
    if (this.configuration.accessToken) {
      const accessToken =
        typeof this.configuration.accessToken === 'function'
          ? this.configuration.accessToken()
          : this.configuration.accessToken;
      headers['Authorization'] = 'Bearer ' + accessToken;
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json', 'application/xml'];
    const httpHeaderAcceptSelected: string | undefined =
      this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers['Accept'] = httpHeaderAcceptSelected;
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json',
      'application/xml',
      'application/x-www-form-urlencoded',
    ];
    const httpContentTypeSelected: string | undefined =
      this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers['Content-Type'] = httpContentTypeSelected;
    }
    return this.httpClient.post<Pet>(`${this.basePath}/pet`, pet, {
      withCredentials: this.configuration.withCredentials,
      headers: headers,
    });
  }
  /**
   * Deletes a pet
   * delete a pet
   * @param petId Pet id to delete
   * @param apiKey
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public deletePet(
    petId: number,
    apiKey?: string
  ): Observable<AxiosResponse<any>>;
  public deletePet(petId: number, apiKey?: string): Observable<any> {
    if (petId === null || petId === undefined) {
      throw new Error(
        'Required parameter petId was null or undefined when calling deletePet.'
      );
    }

    let headers = { ...this.defaultHeaders };
    if (apiKey !== undefined && apiKey !== null) {
      headers['api_key'] = String(apiKey);
    }

    // authentication (petstore_auth) required
    if (this.configuration.accessToken) {
      const accessToken =
        typeof this.configuration.accessToken === 'function'
          ? this.configuration.accessToken()
          : this.configuration.accessToken;
      headers['Authorization'] = 'Bearer ' + accessToken;
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [];
    const httpHeaderAcceptSelected: string | undefined =
      this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers['Accept'] = httpHeaderAcceptSelected;
    }

    // to determine the Content-Type header
    const consumes: string[] = [];
    return this.httpClient.delete<any>(
      `${this.basePath}/pet/${encodeURIComponent(String(petId))}`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
      }
    );
  }
  /**
   * Finds Pets by status
   * Multiple status values can be provided with comma separated strings
   * @param status Status values that need to be considered for filter
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public findPetsByStatus(
    status?: 'available' | 'pending' | 'sold'
  ): Observable<AxiosResponse<Array<Pet>>>;
  public findPetsByStatus(
    status?: 'available' | 'pending' | 'sold'
  ): Observable<any> {
    let queryParameters = new URLSearchParams();
    if (status !== undefined && status !== null) {
      queryParameters.append('status', <any>status);
    }

    let headers = { ...this.defaultHeaders };

    // authentication (petstore_auth) required
    if (this.configuration.accessToken) {
      const accessToken =
        typeof this.configuration.accessToken === 'function'
          ? this.configuration.accessToken()
          : this.configuration.accessToken;
      headers['Authorization'] = 'Bearer ' + accessToken;
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json', 'application/xml'];
    const httpHeaderAcceptSelected: string | undefined =
      this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers['Accept'] = httpHeaderAcceptSelected;
    }

    // to determine the Content-Type header
    const consumes: string[] = [];
    return this.httpClient.get<Array<Pet>>(
      `${this.basePath}/pet/findByStatus`,
      {
        params: queryParameters,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
      }
    );
  }
  /**
   * Finds Pets by tags
   * Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
   * @param tags Tags to filter by
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public findPetsByTags(
    tags?: Array<string>
  ): Observable<AxiosResponse<Array<Pet>>>;
  public findPetsByTags(tags?: Array<string>): Observable<any> {
    let queryParameters = new URLSearchParams();
    if (tags) {
      tags.forEach((element) => {
        queryParameters.append('tags', <any>element);
      });
    }

    let headers = { ...this.defaultHeaders };

    // authentication (petstore_auth) required
    if (this.configuration.accessToken) {
      const accessToken =
        typeof this.configuration.accessToken === 'function'
          ? this.configuration.accessToken()
          : this.configuration.accessToken;
      headers['Authorization'] = 'Bearer ' + accessToken;
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json', 'application/xml'];
    const httpHeaderAcceptSelected: string | undefined =
      this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers['Accept'] = httpHeaderAcceptSelected;
    }

    // to determine the Content-Type header
    const consumes: string[] = [];
    return this.httpClient.get<Array<Pet>>(`${this.basePath}/pet/findByTags`, {
      params: queryParameters,
      withCredentials: this.configuration.withCredentials,
      headers: headers,
    });
  }
  /**
   * Find pet by ID
   * Returns a single pet
   * @param petId ID of pet to return
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getPetById(petId: number): Observable<AxiosResponse<Pet>>;
  public getPetById(petId: number): Observable<any> {
    if (petId === null || petId === undefined) {
      throw new Error(
        'Required parameter petId was null or undefined when calling getPetById.'
      );
    }

    let headers = { ...this.defaultHeaders };

    // authentication (petstore_auth) required
    if (this.configuration.accessToken) {
      const accessToken =
        typeof this.configuration.accessToken === 'function'
          ? this.configuration.accessToken()
          : this.configuration.accessToken;
      headers['Authorization'] = 'Bearer ' + accessToken;
    }

    // authentication (api_key) required
    if (this.configuration.apiKeys['api_key']) {
      headers['api_key'] = this.configuration.apiKeys['api_key'];
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json', 'application/xml'];
    const httpHeaderAcceptSelected: string | undefined =
      this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers['Accept'] = httpHeaderAcceptSelected;
    }

    // to determine the Content-Type header
    const consumes: string[] = [];
    return this.httpClient.get<Pet>(
      `${this.basePath}/pet/${encodeURIComponent(String(petId))}`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
      }
    );
  }
  /**
   * Update an existing pet
   * Update an existing pet by Id
   * @param pet Update an existent pet in the store
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public updatePet(pet: Pet): Observable<AxiosResponse<Pet>>;
  public updatePet(pet: Pet): Observable<any> {
    if (pet === null || pet === undefined) {
      throw new Error(
        'Required parameter pet was null or undefined when calling updatePet.'
      );
    }

    let headers = { ...this.defaultHeaders };

    // authentication (petstore_auth) required
    if (this.configuration.accessToken) {
      const accessToken =
        typeof this.configuration.accessToken === 'function'
          ? this.configuration.accessToken()
          : this.configuration.accessToken;
      headers['Authorization'] = 'Bearer ' + accessToken;
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json', 'application/xml'];
    const httpHeaderAcceptSelected: string | undefined =
      this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers['Accept'] = httpHeaderAcceptSelected;
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json',
      'application/xml',
      'application/x-www-form-urlencoded',
    ];
    const httpContentTypeSelected: string | undefined =
      this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers['Content-Type'] = httpContentTypeSelected;
    }
    return this.httpClient.put<Pet>(`${this.basePath}/pet`, pet, {
      withCredentials: this.configuration.withCredentials,
      headers: headers,
    });
  }
  /**
   * Updates a pet in the store with form data
   *
   * @param petId ID of pet that needs to be updated
   * @param name Name of pet that needs to be updated
   * @param status Status of pet that needs to be updated
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public updatePetWithForm(
    petId: number,
    name?: string,
    status?: string
  ): Observable<AxiosResponse<any>>;
  public updatePetWithForm(
    petId: number,
    name?: string,
    status?: string
  ): Observable<any> {
    if (petId === null || petId === undefined) {
      throw new Error(
        'Required parameter petId was null or undefined when calling updatePetWithForm.'
      );
    }

    let queryParameters = new URLSearchParams();
    if (name !== undefined && name !== null) {
      queryParameters.append('name', <any>name);
    }
    if (status !== undefined && status !== null) {
      queryParameters.append('status', <any>status);
    }

    let headers = { ...this.defaultHeaders };

    // authentication (petstore_auth) required
    if (this.configuration.accessToken) {
      const accessToken =
        typeof this.configuration.accessToken === 'function'
          ? this.configuration.accessToken()
          : this.configuration.accessToken;
      headers['Authorization'] = 'Bearer ' + accessToken;
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [];
    const httpHeaderAcceptSelected: string | undefined =
      this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers['Accept'] = httpHeaderAcceptSelected;
    }

    // to determine the Content-Type header
    const consumes: string[] = [];
    return this.httpClient.post<any>(
      `${this.basePath}/pet/${encodeURIComponent(String(petId))}`,
      null,
      {
        params: queryParameters,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
      }
    );
  }
  /**
   * uploads an image
   *
   * @param petId ID of pet to update
   * @param additionalMetadata Additional Metadata
   * @param body
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public uploadFile(
    petId: number,
    additionalMetadata?: string,
    body?: Blob
  ): Observable<AxiosResponse<ApiResponse>>;
  public uploadFile(
    petId: number,
    additionalMetadata?: string,
    body?: Blob
  ): Observable<any> {
    if (petId === null || petId === undefined) {
      throw new Error(
        'Required parameter petId was null or undefined when calling uploadFile.'
      );
    }

    let queryParameters = new URLSearchParams();
    if (additionalMetadata !== undefined && additionalMetadata !== null) {
      queryParameters.append('additionalMetadata', <any>additionalMetadata);
    }

    let headers = { ...this.defaultHeaders };

    // authentication (petstore_auth) required
    if (this.configuration.accessToken) {
      const accessToken =
        typeof this.configuration.accessToken === 'function'
          ? this.configuration.accessToken()
          : this.configuration.accessToken;
      headers['Authorization'] = 'Bearer ' + accessToken;
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined =
      this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers['Accept'] = httpHeaderAcceptSelected;
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/octet-stream'];
    const httpContentTypeSelected: string | undefined =
      this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers['Content-Type'] = httpContentTypeSelected;
    }
    return this.httpClient.post<ApiResponse>(
      `${this.basePath}/pet/${encodeURIComponent(String(petId))}/uploadImage`,
      body,
      {
        params: queryParameters,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
      }
    );
  }
}
